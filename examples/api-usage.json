[
  {
    "id": "api-usage-flow",
    "type": "tab",
    "label": "Wger API Advanced Usage",
    "disabled": false,
    "info": "This flow demonstrates advanced usage of the generic wger-api node for custom operations not covered by specialized nodes."
  },
  {
    "id": "wger-config-api",
    "type": "wger-config",
    "name": "Wger API",
    "apiUrl": "https://wger.de",
    "authType": "token"
  },
  {
    "id": "get-server-info",
    "type": "inject",
    "z": "api-usage-flow",
    "name": "Get Server Info",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"endpoint\":\"/api/v2/info/\",\"method\":\"GET\"}",
    "payloadType": "json",
    "x": 140,
    "y": 80,
    "wires": [["api-info-node"]]
  },
  {
    "id": "api-info-node",
    "type": "wger-api",
    "z": "api-usage-flow",
    "name": "Server Info",
    "server": "wger-config-api",
    "x": 310,
    "y": 80,
    "wires": [["debug-info"]]
  },
  {
    "id": "debug-info",
    "type": "debug",
    "z": "api-usage-flow",
    "name": "Server Information",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 480,
    "y": 80,
    "wires": []
  },
  {
    "id": "get-languages",
    "type": "inject",
    "z": "api-usage-flow",
    "name": "Get Languages",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"endpoint\":\"/api/v2/language/\",\"method\":\"GET\"}",
    "payloadType": "json",
    "x": 140,
    "y": 140,
    "wires": [["api-languages-node"]]
  },
  {
    "id": "api-languages-node",
    "type": "wger-api",
    "z": "api-usage-flow",
    "name": "Get Languages",
    "server": "wger-config-api",
    "x": 320,
    "y": 140,
    "wires": [["format-languages"]]
  },
  {
    "id": "format-languages",
    "type": "function",
    "z": "api-usage-flow",
    "name": "Format Languages",
    "func": "// Format available languages for display\nif (msg.payload && msg.payload.results) {\n    const languages = msg.payload.results.map(lang => ({\n        id: lang.id,\n        code: lang.short_name,\n        name: lang.full_name\n    }));\n    \n    msg.payload = {\n        availableLanguages: languages,\n        count: languages.length\n    };\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 510,
    "y": 140,
    "wires": [["debug-languages"]]
  },
  {
    "id": "debug-languages",
    "type": "debug",
    "z": "api-usage-flow",
    "name": "Available Languages",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 700,
    "y": 140,
    "wires": []
  },
  {
    "id": "custom-search",
    "type": "inject",
    "z": "api-usage-flow",
    "name": "Custom Exercise Search",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"endpoint\":\"/api/v2/exercise/\",\"method\":\"GET\",\"params\":{\"muscles\":1,\"equipment\":7,\"language\":2}}",
    "payloadType": "json",
    "x": 170,
    "y": 220,
    "wires": [["api-custom-search"]]
  },
  {
    "id": "api-custom-search",
    "type": "wger-api",
    "z": "api-usage-flow",
    "name": "Custom Search",
    "server": "wger-config-api",
    "x": 380,
    "y": 220,
    "wires": [["process-search-results"]]
  },
  {
    "id": "process-search-results",
    "type": "function",
    "z": "api-usage-flow",
    "name": "Process Results",
    "func": "// Process custom search results\nif (msg.payload && msg.payload.results) {\n    const exercises = msg.payload.results.map(exercise => ({\n        id: exercise.id,\n        name: exercise.name,\n        description: exercise.description ? exercise.description.substring(0, 100) + '...' : 'No description',\n        muscles: exercise.muscles || [],\n        equipment: exercise.equipment || []\n    }));\n    \n    msg.payload = {\n        exercises: exercises,\n        totalFound: msg.payload.count,\n        searchCriteria: {\n            muscles: 1,\n            equipment: 7,\n            language: 2\n        }\n    };\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 560,
    "y": 220,
    "wires": [["debug-custom-search"]]
  },
  {
    "id": "debug-custom-search",
    "type": "debug",
    "z": "api-usage-flow",
    "name": "Custom Search Results",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 760,
    "y": 220,
    "wires": []
  },
  {
    "id": "get-user-profile",
    "type": "inject",
    "z": "api-usage-flow",
    "name": "Get User Profile",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"endpoint\":\"/api/v2/userprofile/\",\"method\":\"GET\"}",
    "payloadType": "json",
    "x": 150,
    "y": 300,
    "wires": [["api-profile-node"]]
  },
  {
    "id": "api-profile-node",
    "type": "wger-api",
    "z": "api-usage-flow",
    "name": "Get Profile",
    "server": "wger-config-api",
    "x": 320,
    "y": 300,
    "wires": [["extract-profile-data"]]
  },
  {
    "id": "extract-profile-data",
    "type": "function",
    "z": "api-usage-flow",
    "name": "Extract Profile Data",
    "func": "// Extract relevant profile information\nif (msg.payload && msg.payload.results && msg.payload.results.length > 0) {\n    const profile = msg.payload.results[0];\n    msg.payload = {\n        userId: profile.user,\n        isTemporary: profile.is_temporary,\n        age: profile.age,\n        height: profile.height,\n        gender: profile.gender === '1' ? 'Male' : profile.gender === '2' ? 'Female' : 'Other',\n        sleepHours: profile.sleep_hours,\n        workHours: profile.work_hours,\n        workIntensity: profile.work_intensity,\n        sportIntensity: profile.sport_intensity,\n        freetime: profile.freetime,\n        calories: profile.calories\n    };\n} else {\n    msg.payload = { error: 'No profile data found or authentication required' };\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 540,
    "y": 300,
    "wires": [["debug-profile"]]
  },
  {
    "id": "debug-profile",
    "type": "debug",
    "z": "api-usage-flow",
    "name": "User Profile",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 720,
    "y": 300,
    "wires": []
  },
  {
    "id": "batch-api-calls",
    "type": "inject",
    "z": "api-usage-flow",
    "name": "Batch API Calls",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[{\"name\":\"categories\",\"endpoint\":\"/api/v2/exercisecategory/\",\"method\":\"GET\"},{\"name\":\"muscles\",\"endpoint\":\"/api/v2/muscle/\",\"method\":\"GET\"},{\"name\":\"equipment\",\"endpoint\":\"/api/v2/equipment/\",\"method\":\"GET\"}]",
    "payloadType": "json",
    "x": 140,
    "y": 380,
    "wires": [["split-batch-calls"]]
  },
  {
    "id": "split-batch-calls",
    "type": "split",
    "z": "api-usage-flow",
    "name": "Split Calls",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "callName",
    "x": 310,
    "y": 380,
    "wires": [["batch-api-node"]]
  },
  {
    "id": "batch-api-node",
    "type": "wger-api",
    "z": "api-usage-flow",
    "name": "Batch API Call",
    "server": "wger-config-api",
    "x": 460,
    "y": 380,
    "wires": [["join-batch-results"]]
  },
  {
    "id": "join-batch-results",
    "type": "join",
    "z": "api-usage-flow",
    "name": "Join Results",
    "mode": "auto",
    "build": "object",
    "property": "payload",
    "propertyType": "msg",
    "key": "callName",
    "joiner": "\\n",
    "joinerType": "str",
    "accumulate": true,
    "timeout": "",
    "count": "3",
    "reduceRight": false,
    "reduceExp": "",
    "reduceInit": "",
    "reduceInitType": "",
    "reduceFixup": "",
    "x": 620,
    "y": 380,
    "wires": [["format-batch-results"]]
  },
  {
    "id": "format-batch-results",
    "type": "function",
    "z": "api-usage-flow",
    "name": "Format Batch Results",
    "func": "// Format the combined batch results\nconst results = {};\n\nfor (const [key, data] of Object.entries(msg.payload)) {\n    if (data && data.results) {\n        switch (key) {\n            case 'categories':\n                results.categories = data.results.map(cat => ({\n                    id: cat.id,\n                    name: cat.name\n                }));\n                break;\n            case 'muscles':\n                results.muscles = data.results.map(muscle => ({\n                    id: muscle.id,\n                    name: muscle.name,\n                    isFront: muscle.is_front\n                }));\n                break;\n            case 'equipment':\n                results.equipment = data.results.map(eq => ({\n                    id: eq.id,\n                    name: eq.name\n                }));\n                break;\n        }\n    }\n}\n\nmsg.payload = {\n    batchResults: results,\n    summary: {\n        categoriesCount: results.categories ? results.categories.length : 0,\n        musclesCount: results.muscles ? results.muscles.length : 0,\n        equipmentCount: results.equipment ? results.equipment.length : 0\n    }\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 800,
    "y": 380,
    "wires": [["debug-batch"]]
  },
  {
    "id": "debug-batch",
    "type": "debug",
    "z": "api-usage-flow",
    "name": "Batch Results",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 980,
    "y": 380,
    "wires": []
  },
  {
    "id": "error-handling-demo",
    "type": "inject",
    "z": "api-usage-flow",
    "name": "Test Error Handling",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"endpoint\":\"/api/v2/invalid-endpoint/\",\"method\":\"GET\"}",
    "payloadType": "json",
    "x": 160,
    "y": 460,
    "wires": [["api-error-demo"]]
  },
  {
    "id": "api-error-demo",
    "type": "wger-api",
    "z": "api-usage-flow",
    "name": "Error Demo",
    "server": "wger-config-api",
    "x": 340,
    "y": 460,
    "wires": [["debug-success"], ["handle-api-error"]]
  },
  {
    "id": "debug-success",
    "type": "debug",
    "z": "api-usage-flow",
    "name": "Success (unexpected)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 530,
    "y": 440,
    "wires": []
  },
  {
    "id": "handle-api-error",
    "type": "function",
    "z": "api-usage-flow",
    "name": "Handle API Error",
    "func": "// Process API errors gracefully\nif (msg.error) {\n    msg.payload = {\n        errorHandled: true,\n        errorType: 'API_ERROR',\n        message: msg.error.message || 'Unknown API error',\n        statusCode: msg.error.statusCode || 'Unknown',\n        endpoint: '/api/v2/invalid-endpoint/',\n        suggestion: 'Check the API endpoint URL and your authentication'\n    };\n    \n    // Clear the error so it doesn't propagate\n    delete msg.error;\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 480,
    "wires": [["debug-error-handled"]]
  },
  {
    "id": "debug-error-handled",
    "type": "debug",
    "z": "api-usage-flow",
    "name": "Error Handled",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 720,
    "y": 480,
    "wires": []
  }
]